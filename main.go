package main

import (
	"chanterelle/internal/handlers"
	"chanterelle/internal/repositories"
	"chanterelle/internal/services"
	"context"
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"chanterelle/internal/config"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	_ "github.com/lib/pq"
)

var validate *validator.Validate

func main() {
	// Load configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}

	validate = validator.New()

	dsn := fmt.Sprintf("postgresql://%s:%s@%s:%s/%s?sslmode=disable",
		cfg.DBUser, cfg.DBPassword, cfg.DBHost, cfg.DBPort, cfg.DBName)
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("Failed to open database connection: %v", err)
	}

	// Retry database connection with exponential backoff
	maxRetries := 10
	retryDelay := 1 * time.Second
	for i := 0; i < maxRetries; i++ {
		err = db.Ping()
		if err == nil {
			break
		}
		log.Printf("Database connection attempt %d failed: %v", i+1, err)
		if i == maxRetries-1 {
			log.Fatalf("Failed to connect to database after %d attempts", maxRetries)
		}
		time.Sleep(retryDelay)
		retryDelay *= 2 // Exponential backoff
	}

	// Create contacts table if it doesn't exist
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS contacts (
			id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
			name VARCHAR(100) NOT NULL,
			email VARCHAR(255) NOT NULL,
			message TEXT,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		)
	`)
	if err != nil {
		log.Fatal(err)
	}

	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS verification_codes (
			id SERIAL PRIMARY KEY,
			phone_number VARCHAR(20) NOT NULL,
			code VARCHAR(6) NOT NULL,
			expires_at TIMESTAMP NOT NULL,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		)
	`)
	if err != nil {
		log.Fatal(err)
	}

	// Initialize repositories
	contactRepo := repositories.NewContactRepository(db)
	verificationRepo := repositories.NewVerificationCodeRepository(db)

	// Initialize services
	contactService := services.NewContactService(contactRepo)
	verificationService := services.NewVerificationService(cfg, verificationRepo)

	// Initialize handlers
	contactHandler := handlers.NewContactHandler(contactService)
	verificationHandler := handlers.NewVerificationHandler(verificationService, cfg)

	// Initialize Gin router
	r := gin.Default()
	r.Use(gin.Logger())
	r.Use(gin.Recovery())
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// Public routes
	api := r.Group("/api")
	// Contact creation (public)
	api.POST("/contact", contactHandler.CreateContact)
	// Authentication endpoints
	api.POST("/send-verification", verificationHandler.SendVerification)
	api.POST("/verify-code", verificationHandler.VerifyCode)

	// Protected routes
	api.Use(verificationHandler.JWTAuth())

	// Get all contacts
	api.GET("/contacts", contactHandler.GetContacts)

	// Start server
	server := &http.Server{
		Addr:    ":8080",
		Handler: r,
	}

	// Graceful shutdown
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal("Server failed to start:", err)
		}
	}()

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// Shutdown server gracefully
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatal("Server shutdown failed:", err)
	}

	log.Println("Server shutdown gracefully")
}
