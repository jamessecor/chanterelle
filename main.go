package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"github.com/jamessecor/chanterelle/config"
	_ "github.com/lib/pq"
)

type Contact struct {
	ID        int       `json:"id"`
	Name      string    `json:"name" validate:"required,min=2,max=100"`
	Email     string    `json:"email" validate:"required,email"`
	Message   string    `json:"message" validate:"max=500"`
	CreatedAt time.Time `json:"created_at"`
}

var validate *validator.Validate

func main() {
	// Load configuration
	if err := config.LoadConfig(); err != nil {
		// log.Fatal(err)
	}

	validate = validator.New()

	dsn := fmt.Sprintf("postgresql://%s:%s@%s:%s/%s?sslmode=disable",
		config.Config.DBUser,
		config.Config.DBPassword,
		config.Config.DBHost,
		config.Config.DBPort,
		config.Config.DBName,
	)
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatal(err)
	}
	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}

	// Create contacts table if it doesn't exist
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS contacts (
			id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
			name VARCHAR(100) NOT NULL,
			email VARCHAR(255) NOT NULL,
			message TEXT,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		)
	`)
	if err != nil {
		log.Fatal(err)
	}

	r := gin.Default()

	// Add CORS middleware
	r.Use(func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "http://localhost:3000")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}
		c.Next()
	})

	// Frontend routes
	r.Static("/index", "./frontend/dist")

	// Handle all other non-API routes
	r.GET("/!api/*path", func(c *gin.Context) {
		c.File("./frontend/dist/index.html")
	})

	// API routes
	api := r.Group("/api")
	{
		api.POST("/contact", func(c *gin.Context) {
			var contact Contact
			if err := c.ShouldBindJSON(&contact); err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
				return
			}

			if err := validate.Struct(contact); err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
				return
			}

			_, err := db.Exec(
				"INSERT INTO contacts (name, email, message) VALUES ($1, $2, $3)",
				contact.Name,
				contact.Email,
				contact.Message,
			)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
				return
			}

			c.JSON(http.StatusOK, gin.H{"message": "Contact submitted successfully"})
		})

		// TODO: authentication
		api.GET("/contacts", func(c *gin.Context) {
			rows, err := db.Query("SELECT id, name, email, message, created_at FROM contacts")
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
				return
			}
			defer rows.Close()

			var contacts []Contact
			for rows.Next() {
				var contact Contact
				if err := rows.Scan(&contact.ID, &contact.Name, &contact.Email, &contact.Message, &contact.CreatedAt); err != nil {
					c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
					return
				}
				contacts = append(contacts, contact)
			}

			if err := rows.Err(); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
				return
			}

			c.JSON(http.StatusOK, gin.H{"contacts": contacts})
		})

		api.GET("send-email", func(c *gin.Context) {
			if err := SendMail("james.secor@gmail.com", "Test", "This is a test email"); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
				return
			}
			c.JSON(http.StatusOK, gin.H{"message": "Email sent successfully"})
		})

		api.GET("/health", func(c *gin.Context) {
			c.JSON(http.StatusOK, gin.H{"status": "healthy"})
		})
	}

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("Server running on port %s", port)
	r.Run(":" + port)
}
